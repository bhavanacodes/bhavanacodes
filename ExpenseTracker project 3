import java.io.*;
import java.util.*;

class User {
    String username;
    String password;

    public User(String username, String password) {
        this.username = username;
        this.password = password;
    }
}

class Expense {
    String date;
    String category;
    String description;
    double amount;

    public Expense(String date, String category, String description, double amount) {
        this.date = date;
        this.category = category;
        this.description = description;
        this.amount = amount;
    }

    @Override
    public String toString() {
        return date + " | " + category + " | " + description + " | $" + amount;
    }
}

public class ExpenseTracker {
    private static final String USERS_FILE = "users.txt";
    private static final String EXPENSES_FILE = "expenses.txt";
    private static Map<String, List<Expense>> userExpenses = new HashMap<>();
    private static User currentUser;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        loadUsers();
        loadExpenses();

        System.out.println("Welcome to Expense Tracker!");
        while (true) {
            System.out.println("\n1. Register\n2. Login\n3. Exit");
            System.out.print("Choose an option: ");
            int choice = scanner.nextInt();
            scanner.nextLine();  

            switch (choice) {
                case 1 -> registerUser(scanner);
                case 2 -> {
                    if (loginUser(scanner)) {
                        mainMenu(scanner);
                    }
                }
                case 3 -> {
                    saveExpenses();
                    System.out.println("Exiting... Goodbye!");
                    return;
                }
                default -> System.out.println("Invalid choice, try again.");
            }
        }
    }

    private static void registerUser(Scanner scanner) {
        System.out.print("Enter username: ");
        String username = scanner.nextLine();
        System.out.print("Enter password: ");
        String password = scanner.nextLine();

        try (BufferedWriter writer = new BufferedWriter(new FileWriter(USERS_FILE, true))) {
            writer.write(username + "," + password);
            writer.newLine();
            System.out.println("Registration successful!");
        } catch (IOException e) {
            System.out.println("Error saving user data.");
        }
    }

    private static boolean loginUser(Scanner scanner) {
        System.out.print("Enter username: ");
        String username = scanner.nextLine();
        System.out.print("Enter password: ");
        String password = scanner.nextLine();

        try (BufferedReader reader = new BufferedReader(new FileReader(USERS_FILE))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] parts = line.split(",");
                if (parts[0].equals(username) && parts[1].equals(password)) {
                    currentUser = new User(username, password);
                    System.out.println("Login successful!");
                    return true;
                }
            }
        } catch (IOException e) {
            System.out.println("Error reading user data.");
        }
        System.out.println("Invalid credentials!");
        return false;
    }

    private static void mainMenu(Scanner scanner) {
        while (true) {
            System.out.println("\n1. Add Expense\n2. View Expenses\n3. Summary by Category\n4. Logout");
            System.out.print("Choose an option: ");
            int choice = scanner.nextInt();
            scanner.nextLine();  

            switch (choice) {
                case 1 -> addExpense(scanner);
                case 2 -> viewExpenses();
                case 3 -> categorySummary();
                case 4 -> {
                    currentUser = null;
                    System.out.println("Logged out successfully!");
                    return;
                }
                default -> System.out.println("Invalid choice, try again.");
            }
        }
    }

    private static void addExpense(Scanner scanner) {
        System.out.print("Enter date (YYYY-MM-DD): ");
        String date = scanner.nextLine();
        System.out.print("Enter category: ");
        String category = scanner.nextLine();
        System.out.print("Enter description: ");
        String description = scanner.nextLine();
        System.out.print("Enter amount: ");
        double amount = scanner.nextDouble();
        scanner.nextLine();  

        Expense expense = new Expense(date, category, description, amount);
        userExpenses.computeIfAbsent(currentUser.username, k -> new ArrayList<>()).add(expense);
        saveExpenses();
        System.out.println("Expense added successfully!");
    }

    private static void viewExpenses() {
        List<Expense> expenses = userExpenses.get(currentUser.username);
        if (expenses == null || expenses.isEmpty()) {
            System.out.println("No expenses found.");
            return;
        }
        System.out.println("\nYour Expenses:");
        expenses.forEach(System.out::println);
    }

    private static void categorySummary() {
        List<Expense> expenses = userExpenses.get(currentUser.username);
        if (expenses == null || expenses.isEmpty()) {
            System.out.println("No expenses found.");
            return;
        }

        Map<String, Double> categoryTotals = new HashMap<>();
        for (Expense expense : expenses) {
            categoryTotals.put(expense.category, categoryTotals.getOrDefault(expense.category, 0.0) + expense.amount);
        }

        System.out.println("\nCategory Summary:");
        for (Map.Entry<String, Double> entry : categoryTotals.entrySet()) {
            System.out.println(entry.getKey() + ": $" + entry.getValue());
        }
    }

    private static void saveExpenses() {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(EXPENSES_FILE))) {
            for (Map.Entry<String, List<Expense>> entry : userExpenses.entrySet()) {
                for (Expense expense : entry.getValue()) {
                    writer.write(entry.getKey() + "," + expense.date + "," + expense.category + "," + expense.description + "," + expense.amount);
                    writer.newLine();
                }
            }
        } catch (IOException e) {
            System.out.println("Error saving expense data.");
        }
    }

    private static void loadUsers() {
        File file = new File(USERS_FILE);
        if (!file.exists()) {
            try {
                file.createNewFile();
            } catch (IOException e) {
                System.out.println("Error creating user file.");
            }
        }
    }

    private static void loadExpenses() {
        File file = new File(EXPENSES_FILE);
        if (!file.exists()) {
            try {
                file.createNewFile();
            } catch (IOException e) {
                System.out.println("Error creating expense file.");
            }
        } else {
            try (BufferedReader reader = new BufferedReader(new FileReader(EXPENSES_FILE))) {
                String line;
                while ((line = reader.readLine()) != null) {
                    String[] parts = line.split(",");
                    String username = parts[0];
                    Expense expense = new Expense(parts[1], parts[2], parts[3], Double.parseDouble(parts[4]));
                    userExpenses.computeIfAbsent(username, k -> new ArrayList<>()).add(expense);
                }
            } catch (IOException e) {
                System.out.println("Error loading expense data.");
            }
        }
    }
}
